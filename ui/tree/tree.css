/* TODO group separator */
.tree-sub:has(> [data-type~="column"]) + .tree-sub:not(:has(> [data-type~="column"])) {
  margin-block-start: .5em;
}

.tree-node {
  position: relative;
  padding-inline: calc(1rem + var(--tree-level) * 1rem) 2rem;
  white-space: nowrap;
  cursor: pointer;
  display: flex;
  align-items: baseline;

  &:hover {
    background-color: hsl(0 0% 50% / .2);
  }
  &[data-selected] {
    background-color: hsl(0 0% 50% / .3);
  }
}

.tree-marker {
  position: absolute;
  inset: 0 auto;
  inline-size: 2rem;
  margin-inline-start: -2rem;
  background-color: currentcolor;
  mask: var(--tree-marker_image) center / 1rem no-repeat;
  -webkit-mask: var(--tree-marker_image) center / 1rem no-repeat;
  opacity: .5;

  --tree-marker_image: url('./marker_database.svg'); /* TODO unknown marker */

  .tree-node[data-type~=database] & {
    --tree-marker_image: url('./marker_database.svg');
  }
  .tree-node[data-type~=schema] & {
    --tree-marker_image: url('./marker_schema.svg');
  }
  .tree-node[data-type~=table] & {
    --tree-marker_image: url('./marker_table.svg');
  }
  .tree-node[data-type~=table_v] & {
    --tree-marker_image: url('./marker_view.svg');
  }
  .tree-node[data-type~=table_f] & {
    --tree-marker_image: url('./marker_view.svg');
  }
  .tree-node[data-type~=column] & {
    --tree-marker_image: url('./marker_column.svg');
  }
  .tree-node[data-type~=column_pk] & {
    --tree-marker_image: url('./marker_column_pk.svg');
    opacity: 1;
  }
  .tree-node[data-type~=func] & {
    --tree-marker_image: url('./marker_func.svg');
  }
  .tree-node[data-type~=agg] & {
    --tree-marker_image: url('./marker_agg.svg');
  }
  .tree-node[data-type~=index] & {
    --tree-marker_image: url('./marker_index.svg');
  }
  .tree-node[data-type~=trigger] & {
    --tree-marker_image: url('./marker_trigger.svg');
  }
  .tree-node[data-type~=constraint] & {
    --tree-marker_image: url('./marker_check.svg');
  }
  .tree-node[data-type~=dir] & {
    --tree-marker_image: url('./marker_dir.svg');
  }
  .tree-node[data-type~=file] & {
    --tree-marker_image: url('./marker_file.svg');
  }
}

.tree-caption {
  min-width: 0;
  text-overflow: ellipsis;
  overflow: hidden;

  .tree-node[data-type~=index] &::before,
  .tree-node[data-type~=trigger] &::before,
  .tree-node[data-type~=constraint] &::before {
    content: '...';
    margin-inline-end: .25rem;
    opacity: .5;
  }
}

.tree-comment {
  flex: 1;
  min-width: 0;
  font-size: .75rem;
  color: hsl(0 0% 50%);
  text-overflow: ellipsis;
  overflow: hidden;
}

.tree-badge {
  align-self: center;
  font-weight: 400;
  font-size: .75rem;
  font-variant-numeric: proportional-nums;
  line-height: 1.25rem;
  border-radius: 1rem;
  padding-inline: .5rem;
  color: hsl(0 0% 60%);
  background-color: hsl(0 0% 12%);

  &:empty {
    display: none;
  }
  .light & {
    background-color: hsl(0 0% 98%);
    color: hsl(0 0% 50%);
  }
}

.tree-toggler {
  position: absolute;
  z-index: 10;
  inset: 0 0 0 auto;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  appearance: none;
  padding: 0;
  margin: 0;
  border: none;
  inline-size: 2em; /* TODO 1lh */
  color: inherit;
  background: none;
  opacity: 0;
  transition: opacity 400ms ease 1000ms;
  cursor: pointer;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background-color: currentcolor;
    mask: url('./toggler.svg') center / 1rem no-repeat;
    -webkit-mask: url('./toggler.svg') center / 1rem no-repeat;
  }
  .tree:hover & {
    transition: opacity 200ms ease;
    opacity: .3;
  }
  .tree &:hover {
    opacity: .7;
  }
  .tree-node[data-expanding] & {
    visibility: hidden;
  }
  .tree-node[data-expanded] & {
    transform: rotate(.25turn);
  }
}

.tree-loader {
  position: absolute;
  inset: 0 0 0 auto;
  border: 2px solid hsl(0 0% 50%);
  width: 1rem;
  margin: .5rem;
  box-sizing: border-box;
  border-radius: 50%;
  border-left-color: transparent;
  animation: 800ms linear tree-spin infinite;
  pointer-events: none;
  display: none;

  .tree-node[data-expanding] & {
    display: initial;
  }
}

@keyframes tree-spin {
  from { transform: rotate(0); }
  to { transform: rotate(1turn); }
}
